# imscript tests
0 verbosity

"when done, this should print # of errors, # of successes, and TESTS DONE" print

# counters
0 errors sto 0 successes sto

# several tests
0 0 == # should be 1 on stack
# this line is general test counter
successes swap errors swap 1 swap 1 swap if dup rcl 1 + swap sto


5 6 == 1 -
successes swap errors swap 1 swap 1 swap if dup rcl 1 + swap sto
5 6 != 
successes swap errors swap 1 swap 1 swap if dup rcl 1 + swap sto

1 0 >
0 1 > 1 -
1 2 < 2 1 < 1 -
successes swap errors swap 1 swap 1 swap if dup rcl 1 + swap sto
successes swap errors swap 1 swap 1 swap if dup rcl 1 + swap sto
successes swap errors swap 1 swap 1 swap if dup rcl 1 + swap sto
successes swap errors swap 1 swap 1 swap if dup rcl 1 + swap sto

2 3 * 6 ==
2 4 / 0.5 == 
1 2 + 3 ==
4 5 - -1 ==
successes swap errors swap 1 swap 1 swap if dup rcl 1 + swap sto
successes swap errors swap 1 swap 1 swap if dup rcl 1 + swap sto
successes swap errors swap 1 swap 1 swap if dup rcl 1 + swap sto
successes swap errors swap 1 swap 1 swap if dup rcl 1 + swap sto

-4 abs 4 ==
5 abs 5 ==
0 abs 0 ==
successes swap errors swap 1 swap 1 swap if dup rcl 1 + swap sto
successes swap errors swap 1 swap 1 swap if dup rcl 1 + swap sto
successes swap errors swap 1 swap 1 swap if dup rcl 1 + swap sto

1.1 ceil 2 ==
-0.3 ceil 0 ==
4 ceil 4 ==
1.1 floor 1 ==
-0.3 floor -1 ==
4 floor 4 ==
successes swap errors swap 1 swap 1 swap if dup rcl 1 + swap sto
successes swap errors swap 1 swap 1 swap if dup rcl 1 + swap sto
successes swap errors swap 1 swap 1 swap if dup rcl 1 + swap sto
successes swap errors swap 1 swap 1 swap if dup rcl 1 + swap sto
successes swap errors swap 1 swap 1 swap if dup rcl 1 + swap sto
successes swap errors swap 1 swap 1 swap if dup rcl 1 + swap sto

2 3 min 2 ==
3 2 min 2 ==
2 2 min 2 ==
3 2 max 3 ==
3 2 max 3 ==
3 3 max 3 ==
successes swap errors swap 1 swap 1 swap if dup rcl 1 + swap sto
successes swap errors swap 1 swap 1 swap if dup rcl 1 + swap sto
successes swap errors swap 1 swap 1 swap if dup rcl 1 + swap sto
successes swap errors swap 1 swap 1 swap if dup rcl 1 + swap sto
successes swap errors swap 1 swap 1 swap if dup rcl 1 + swap sto
successes swap errors swap 1 swap 1 swap if dup rcl 1 + swap sto

1.5 round 2 == # this tricky - float round to even?
2.5 round 3 ==
1.499 round 1 ==
1.01 round 1 ==
0.55 round 1 ==
successes swap errors swap 1 swap 1 swap if dup rcl 1 + swap sto
successes swap errors swap 1 swap 1 swap if dup rcl 1 + swap sto
successes swap errors swap 1 swap 1 swap if dup rcl 1 + swap sto
successes swap errors swap 1 swap 1 swap if dup rcl 1 + swap sto
successes swap errors swap 1 swap 1 swap if dup rcl 1 + swap sto

0 2 10 clamp 2 ==
12 2 10 clamp 10 ==
7 2 10 clamp 7 ==
successes swap errors swap 1 swap 1 swap if dup rcl 1 + swap sto
successes swap errors swap 1 swap 1 swap if dup rcl 1 + swap sto
successes swap errors swap 1 swap 1 swap if dup rcl 1 + swap sto

pi 3.14159265358979323846 - abs 1e-10 <=
e  2.718281828459045 - abs 1e-10 <=
successes swap errors swap 1 swap 1 swap if dup rcl 1 + swap sto
successes swap errors swap 1 swap 1 swap if dup rcl 1 + swap sto

pi cos -1 - abs 1e-10 <=
pi 2 / sin 1 - abs 1e-10 <=
successes swap errors swap 1 swap 1 swap if dup rcl 1 + swap sto
successes swap errors swap 1 swap 1 swap if dup rcl 1 + swap sto

2 3 pow 8 ==
-3 4 pow 81 ==
successes swap errors swap 1 swap 1 swap if dup rcl 1 + swap sto
successes swap errors swap 1 swap 1 swap if dup rcl 1 + swap sto

100 10 log 2 ==
10 10 log 1 ==
successes swap errors swap 1 swap 1 swap if dup rcl 1 + swap sto
successes swap errors swap 1 swap 1 swap if dup rcl 1 + swap sto

4 neg -4 ==
0 sign 0 ==
0.5 sign 1 ==
-1.2 sign -1 ==
successes swap errors swap 1 swap 1 swap if dup rcl 1 + swap sto
successes swap errors swap 1 swap 1 swap if dup rcl 1 + swap sto
successes swap errors swap 1 swap 1 swap if dup rcl 1 + swap sto
successes swap errors swap 1 swap 1 swap if dup rcl 1 + swap sto

# TODO - STRING COMPARISONS

# ---------------------------------- STACK OPS -----------------------
1 2 drop 1 ==
2 1 drop 2 ==
depth 2 ==
successes swap errors swap 1 swap 1 swap if dup rcl 1 + swap sto
successes swap errors swap 1 swap 1 swap if dup rcl 1 + swap sto
successes swap errors swap 1 swap 1 swap if dup rcl 1 + swap sto

3 dup + 6 ==
successes swap errors swap 1 swap 1 swap if dup rcl 1 + swap sto
1 4 dup2 
4 == 
successes swap errors swap 1 swap 1 swap if dup rcl 1 + swap sto
1 ==
successes swap errors swap 1 swap 1 swap if dup rcl 1 + swap sto
4 == 
successes swap errors swap 1 swap 1 swap if dup rcl 1 + swap sto
1 ==
successes swap errors swap 1 swap 1 swap if dup rcl 1 + swap sto
3 4 5 6 4 dupn
6 == 
successes swap errors swap 1 swap 1 swap if dup rcl 1 + swap sto
5 ==
successes swap errors swap 1 swap 1 swap if dup rcl 1 + swap sto
4 ==
successes swap errors swap 1 swap 1 swap if dup rcl 1 + swap sto
3 ==
successes swap errors swap 1 swap 1 swap if dup rcl 1 + swap sto
6 == 
successes swap errors swap 1 swap 1 swap if dup rcl 1 + swap sto
5 ==
successes swap errors swap 1 swap 1 swap if dup rcl 1 + swap sto
4 ==
successes swap errors swap 1 swap 1 swap if dup rcl 1 + swap sto
3 ==
successes swap errors swap 1 swap 1 swap if dup rcl 1 + swap sto

2 3 drop 2 == 
depth 1 == 
successes swap errors swap 1 swap 1 swap if dup rcl 1 + swap sto
successes swap errors swap 1 swap 1 swap if dup rcl 1 + swap sto
1 2 3 4 3 dropn 1 ==
successes swap errors swap 1 swap 1 swap if dup rcl 1 + swap sto
5 6 7 drop2 5 ==
successes swap errors swap 1 swap 1 swap if dup rcl 1 + swap sto

3 2 1 rot 3 ==
successes swap errors swap 1 swap 1 swap if dup rcl 1 + swap sto
1 ==
successes swap errors swap 1 swap 1 swap if dup rcl 1 + swap sto
2 == 
successes swap errors swap 1 swap 1 swap if dup rcl 1 + swap sto
3 2 1 rot unrot
1 ==
successes swap errors swap 1 swap 1 swap if dup rcl 1 + swap sto
2 ==
successes swap errors swap 1 swap 1 swap if dup rcl 1 + swap sto
3 ==
successes swap errors swap 1 swap 1 swap if dup rcl 1 + swap sto

1 2 over
1 ==
successes swap errors swap 1 swap 1 swap if dup rcl 1 + swap sto
2 == 
successes swap errors swap 1 swap 1 swap if dup rcl 1 + swap sto
1 ==
successes swap errors swap 1 swap 1 swap if dup rcl 1 + swap sto

1 2 depth 2 ==
successes swap errors swap 1 swap 1 swap if dup rcl 1 + swap sto
drop2
depth 0 ==
successes swap errors swap 1 swap 1 swap if dup rcl 1 + swap sto

1 2 3 4 5 4 roll # should now be 1 3 4 5 2
2 ==
successes swap errors swap 1 swap 1 swap if dup rcl 1 + swap sto
5 ==
successes swap errors swap 1 swap 1 swap if dup rcl 1 + swap sto
4 ==
successes swap errors swap 1 swap 1 swap if dup rcl 1 + swap sto
3 ==
successes swap errors swap 1 swap 1 swap if dup rcl 1 + swap sto
1 ==
successes swap errors swap 1 swap 1 swap if dup rcl 1 + swap sto

1 2 3 4 5 4 rolld # should now be 1 5 2 3 4
4 ==
successes swap errors swap 1 swap 1 swap if dup rcl 1 + swap sto
3 ==
successes swap errors swap 1 swap 1 swap if dup rcl 1 + swap sto
2 ==
successes swap errors swap 1 swap 1 swap if dup rcl 1 + swap sto
5 ==
successes swap errors swap 1 swap 1 swap if dup rcl 1 + swap sto
1 ==
successes swap errors swap 1 swap 1 swap if dup rcl 1 + swap sto

8 7 6 5 
2 pick 7 ==
successes swap errors swap 1 swap 1 swap if dup rcl 1 + swap sto
0 pick 5 ==
successes swap errors swap 1 swap 1 swap if dup rcl 1 + swap sto
3 pick 8 ==
successes swap errors swap 1 swap 1 swap if dup rcl 1 + swap sto
4 dropn

# ---------------------------------- STRING OPS ------------------------
a a == 
successes swap errors swap 1 swap 1 swap if dup rcl 1 + swap sto

this
" "
is
" one line " + + +
"this is one line " 
== 
successes swap errors swap 1 swap 1 swap if dup rcl 1 + swap sto

depth 0 == 
successes swap errors swap 1 swap 1 swap if dup rcl 1 + swap sto

a b !=
b a !=
b b == 
b b != 1 -
successes swap errors swap 1 swap 1 swap if dup rcl 1 + swap sto
successes swap errors swap 1 swap 1 swap if dup rcl 1 + swap sto
successes swap errors swap 1 swap 1 swap if dup rcl 1 + swap sto
successes swap errors swap 1 swap 1 swap if dup rcl 1 + swap sto

a b >
a a > 1 - 
b a > 1 -
successes swap errors swap 1 swap 1 swap if dup rcl 1 + swap sto
successes swap errors swap 1 swap 1 swap if dup rcl 1 + swap sto
successes swap errors swap 1 swap 1 swap if dup rcl 1 + swap sto

b a <
a a < 1 - 
a b < 1 -
successes swap errors swap 1 swap 1 swap if dup rcl 1 + swap sto
successes swap errors swap 1 swap 1 swap if dup rcl 1 + swap sto
successes swap errors swap 1 swap 1 swap if dup rcl 1 + swap sto

a b >=
a a >= 
b a >= 1 -
successes swap errors swap 1 swap 1 swap if dup rcl 1 + swap sto
successes swap errors swap 1 swap 1 swap if dup rcl 1 + swap sto
successes swap errors swap 1 swap 1 swap if dup rcl 1 + swap sto

a b <= 1 -
a a <= 
b a <= 
successes swap errors swap 1 swap 1 swap if dup rcl 1 + swap sto
successes swap errors swap 1 swap 1 swap if dup rcl 1 + swap sto
successes swap errors swap 1 swap 1 swap if dup rcl 1 + swap sto

# ---------------------------------- CONTROL ---------------------------

0    # sum
0    # index
label1 label # loop here
1 +  # next index
swap over + # increment sum
swap # index back on top

dup 10 == 1 - label1 je # loop
drop # index gone
55 == # sum 1-10
successes swap errors swap 1 swap 1 swap if dup rcl 1 + swap sto

""
-3 12 rangeloop
->str
+ endloop
"-3-2-10123456789101112"
== 
successes swap errors swap 1 swap 1 swap if dup rcl 1 + swap sto

""
4 -2 rangeloop
->str
+ endloop
"43210-1-2"
== 
successes swap errors swap 1 swap 1 swap if dup rcl 1 + swap sto

""
bob ann fred monkey 4
itemloop
drop # drop index
" " + + 
endloop
"bob ann fred monkey " ==
successes swap errors swap 1 swap 1 swap if dup rcl 1 + swap sto


# ---------------------------------- PRINT STATS -----------------------
# get stats
"Number of errors: " print
errors rcl print
"Number of successes: " print
successes rcl print

"TESTS DONE"
print

0 halt
"if you see this, halt doesn't work" print
-1 halt

# ---------------------------------- TODO _ TEST THESE -----------------------
#	{"read","filename -> image",ReadImage},
#	{"write","image filename -> [] and outputs saved image",WriteImage},
#	{"colorspace","image space -> image', where space=[linear|sRGB|YCbCr|RGB], does conversion",ColorTransform},
#	{"error","im1 im2 errtype -> errval, prints error type mse, psnr, ssim",ImageError},
#	{"maxc","img -> max, max value of all r,g,b values in image",ImageError},
#	{"size","img -> w h, where w,h is size in pixels",ImageSize},
#	{"files","path regex -> f1 f2 ... fn n, reads files matching regex, pushes on stack with count",GetFiles},
#
#	{"getpixel","img i j -> img r g b a, reads pixel 0-1",PixelOp},
#	{"setpixel","img i j r g b a -> img, writes pixel 0-1",PixelOp},
#
#	// and,or,not,xor,rand, rdz(randseed), >>,<<	
#	// ticks = time, 
#	// type - object type
#
#	// image ops
#	{"resize","img w h style -> resize to w h by style nn,bilinear,bicubic,lanczos2,lanczos3,lanczos4",ResizeImage},
#	{"resize%","img v style -> resize by v%, style as above",ResizeImage},
#	{"resize*","img m style -> resize by multiplier m, style as above",ResizeImage},
#
#	{"gaussian","img s -> img' , gaussian blur, std dev s",GaussianBlur},
#
#	{"rotate","TODO: img angle expand -> rotate image by angle degrees, expand true makes bigger to center, false keeps size",RotateImage},
#
#	{"crop","img x1 y1 x2 y2 -> crop image to rectangle (x1,y1)-(x2,y2) inclusive", CropImage},
#	{"pad", "img top bottom left right r g b a -> img2, pad image with given color, given pixel margins", PadImage},
#	{"flipx", "img -> img2, flip image", FlipImage},
#	{"flipy", "img -> img2, flip image", FlipImage},
#	// todo - draw, text, trim
#

#	// flow & state
#	{"dumpstate" ," -> , print out state items", StateOp},
#	{"system" ,"cmd -> return_value, execute cmd on system call - WARNING - be careful!", StateOp},
#	{"if","t1 t2 .. tn f1 f2 .. fm n m b -> ti or fj, if b != 0, keep t1..tn, else keep f1..fm", StateOp},
#


